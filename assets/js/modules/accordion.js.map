{"version":3,"sources":["modules/accordion.js"],"names":["instances","IS_OPEN","MOBILE_ONLY","Accordion","element","accordionIsMobileOnly","bindEvents","listener","Delegate","on","event","window","isMobileSize","toggleAccordion","destroy","allDtEls","querySelectorAll","forEach","dt","closestDt","init","push","instance","unbindEvents"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEA,IAAIA,YAAY,EAAhB;;AAEA,IAAMC,UAAU,SAAhB;AACA,IAAMC,cAAc,wBAApB;;IAEMC,S;;AAEF;;;;;AAKA,uBAAYC,OAAZ,EAAqB;AAAA;;AACjB,aAAKA,OAAL,GAAeA,OAAf;AACA,aAAKC,qBAAL,GAA6B,sBAAS,KAAKD,OAAd,EAAuBF,WAAvB,CAA7B;AACA,aAAKI,UAAL;AACH;;AAED;;;;;;;qCAGa;AAAA;;AACT,iBAAKC,QAAL,GAAgB,IAAIC,qBAAJ,CAAa,KAAKJ,OAAlB,CAAhB;;AAEA,iBAAKG,QAAL,CAAcE,EAAd,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC,UAACC,KAAD,EAAQN,OAAR,EAAoB;AAChD,oBAAK,MAAKC,qBAAL,IAA8BM,OAAOC,YAAtC,IAAuD,MAAKP,qBAAL,KAA+B,IAA1F,EAAgG;AAC5F,0BAAKQ,eAAL,CAAqBT,OAArB;AACH;AACJ,aAJD;AAKH;;AAED;;;;;;uCAGe;AACX,iBAAKG,QAAL,CAAcO,OAAd;AACH;;AAED;;;;;;;;wCAKgBV,O,EAAS;AACrB,gBAAI,sBAASA,OAAT,EAAkBH,OAAlB,CAAJ,EAAgC;AAC5B,yCAAYG,OAAZ,EAAqBH,OAArB;AACH,aAFD,MAEO;AACH,oBAAMc,WAAW,0BAAa,KAAKX,OAAL,CAAaY,gBAAb,CAA8B,IAA9B,CAAb,CAAjB;AACAD,yBAASE,OAAT,CAAiB;AAAA,2BAAM,yBAAYC,EAAZ,EAAgBjB,OAAhB,CAAN;AAAA,iBAAjB;AACA,oBAAMkB,YAAY,qBAAQf,OAAR,EAAiB,IAAjB,CAAlB;AACA,sCAASe,SAAT,EAAoBlB,OAApB;AACH;AACJ;;;;;;kBAGU;AACXmB,UAAM,uBAAW;AACbpB,kBAAUqB,IAAV,CAAe,IAAIlB,SAAJ,CAAcC,OAAd,CAAf;AACH,KAHU;;AAKXU,aAAS,mBAAM;AACXd,kBAAUiB,OAAV,CAAkB;AAAA,mBAAYK,SAASC,YAAT,EAAZ;AAAA,SAAlB;AACAvB,oBAAY,EAAZ;AACH;AARU,C","file":"accordion.js","sourcesContent":["import { Delegate } from 'dom-delegate';\nimport { addClass, removeClass, nodesToArray, hasClass, closest } from '@pod-point/dom-ops';\n\nlet instances = [];\n\nconst IS_OPEN = 'is-open';\nconst MOBILE_ONLY = 'accordion--only-mobile';\n\nclass Accordion {\n\n    /**\n     * Creates a new accordion element\n     *\n     * @param {element}\n     */\n    constructor(element) {\n        this.element = element;\n        this.accordionIsMobileOnly = hasClass(this.element, MOBILE_ONLY);\n        this.bindEvents();\n    }\n\n    /**\n     * Binds the event listeners from the elements\n     */\n    bindEvents() {\n        this.listener = new Delegate(this.element);\n\n        this.listener.on('click', 'dt', (event, element) => {\n            if ((this.accordionIsMobileOnly && window.isMobileSize) || this.accordionIsMobileOnly !== true) {\n                this.toggleAccordion(element);\n            }\n        });\n    }\n\n    /**\n     * Unbinds the event listeners from the elements\n     */\n    unbindEvents() {\n        this.listener.destroy();\n    }\n\n    /**\n     * Toggles the accordion.\n     *\n     * @param {element} element to toggle\n     */\n    toggleAccordion(element) {\n        if (hasClass(element, IS_OPEN)) {\n            removeClass(element, IS_OPEN);\n        } else {\n            const allDtEls = nodesToArray(this.element.querySelectorAll('dt'));\n            allDtEls.forEach(dt => removeClass(dt, IS_OPEN));\n            const closestDt = closest(element, 'dt');\n            addClass(closestDt, IS_OPEN);\n        }\n    }\n}\n\nexport default {\n    init: element => {\n        instances.push(new Accordion(element));\n    },\n\n    destroy: () => {\n        instances.forEach(instance => instance.unbindEvents());\n        instances = [];\n    },\n};\n"]}