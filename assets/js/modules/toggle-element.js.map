{"version":3,"sources":["modules/toggle-element.js"],"names":["instances","IS_ACTIVE","ToggleElement","element","elementId","getAttribute","toggleButtonsSelector","openButtonsSelector","closeButtonsSelector","allElementsSelector","toggleButtons","document","querySelectorAll","openButtons","closeButtons","allElements","bindEvents","forEach","toggleButton","addEventListener","event","preventDefault","toggleElement","openButton","openElement","closeButton","closeElement","toggleListeners","toggleListener","destroy","openListeners","openListener","closeListeners","closeListener","button","el","init","push","instance","unbindEvents"],"mappings":"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","file":"toggle-element.js","sourcesContent":["import { nodesToArray, addClass, removeClass, hasClass } from '@pod-point/dom-ops';\n\nlet instances = [];\nconst IS_ACTIVE = 'is-active';\n\nclass ToggleElement {\n\n    /**\n     * Creates a new toggle element\n     *\n     * @param {element}\n     */\n    constructor(element) {\n        this.element = element;\n        this.elementId = element.getAttribute('id');\n\n        const toggleButtonsSelector = `[data-toggle-el=\"${this.elementId}\"]`;\n        const openButtonsSelector = `[data-open-el=\"${this.elementId}\"]`;\n        const closeButtonsSelector = `[data-close-el=\"${this.elementId}\"]`;\n        const allElementsSelector = '[data-js-module=\"toggleElement\"]';\n\n        this.toggleButtons = nodesToArray(document.querySelectorAll(toggleButtonsSelector)) || [];\n        this.openButtons = nodesToArray(document.querySelectorAll(openButtonsSelector)) || [];\n        this.closeButtons = nodesToArray(document.querySelectorAll(closeButtonsSelector)) || [];\n\n        this.allElements = nodesToArray(document.querySelectorAll(allElementsSelector));\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds the event listeners from the elements\n     */\n    bindEvents() {\n        this.toggleButtons.forEach(toggleButton => {\n            toggleButton.addEventListener('click', event => {\n                event.preventDefault();\n                this.toggleElement();\n            });\n        });\n\n        this.openButtons.forEach(openButton => {\n            openButton.addEventListener('click', event => {\n                event.preventDefault();\n                this.openElement();\n            });\n        });\n\n        this.closeButtons.forEach(closeButton => {\n            closeButton.addEventListener('click', event => {\n                event.preventDefault();\n                this.closeElement();\n            });\n        });\n    }\n\n    /**\n     * Unbinds the event listeners from the elements\n     */\n    unbindEvents() {\n        this.toggleListeners.forEach(toggleListener => toggleListener.destroy());\n        this.openListeners.forEach(openListener => openListener.destroy());\n        this.closeListeners.forEach(closeListener => closeListener.destroy());\n    }\n\n    /**\n     * Toggle element depending if already active or not\n     */\n    toggleElement() {\n        if (hasClass(this.element, IS_ACTIVE)) {\n            this.closeElement();\n        } else {\n            this.openElement();\n        }\n    }\n\n    /**\n     * Handle the element opening\n     */\n    openElement() {\n        addClass(this.element, IS_ACTIVE);\n        this.toggleButtons.forEach(button => addClass(button, IS_ACTIVE));\n        this.openButtons.forEach(button => addClass(button, IS_ACTIVE));\n    }\n\n    /**\n     * Handle the element closing\n     */\n    closeElement() {\n        removeClass(this.element, IS_ACTIVE);\n        this.toggleButtons.forEach(button => removeClass(button, IS_ACTIVE));\n        this.openButtons.forEach(button => removeClass(button, IS_ACTIVE));\n    }\n\n    /**\n     * Handle the closing of all other elements\n     */\n    closeAllElements() {\n        this.allElements.forEach(el => {\n            removeClass(el, IS_ACTIVE);\n        });\n    }\n}\n\nexport default {\n    init: element => {\n        instances.push(new ToggleElement(element));\n    },\n\n    destroy: () => {\n        instances.forEach(instance => instance.unbindEvents());\n        instances = [];\n    },\n};\n"]}